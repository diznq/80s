// autogenerated by template_compiler
#include <90s/httpd/page.hpp>
 
#include <ctime> 
#include "main.hpp"

class renderable : public s90::httpd::page {
public:
    const char *name() const override {
        return "GET /time";
    }
    s90::aiopromise<s90::nil> render(s90::httpd::ienvironment& env) const override {
        env.content_type("text/html");
		env.output()->write("<!DOCTYPE html>\n"
		"<html lang=\"en\">\n"
		"<head>\n"
		"    <meta charset=\"UTF-8\">\n"
		"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
		"    <title>Document</title>\n"
		"</head>\n"
		"<body>\n"
		"    ");

        auto ctx = env.local_context<default_context>();
        auto name = env.query("name");
        if(name) {
            		env.output()->write_formatted(" <h1>Hi, {}</h1>", name.value());
        } else {
            		env.output()->write(" <h1>Hello!</h1>");
        }
        std::time_t t = std::time(NULL);
        std::tm *tm = std::localtime(&t);
        const char *days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

        		env.output()->write_formatted(" <h2>Today is: {}</h2>",  days[tm->tm_wday] );
    		env.output()->write("\n"
		"    <br>\n"
		"    <hr>\n"
		"    ");

        		env.output()->write_formatted(" <p>This is coming from global context: {}</p>",  ctx->get_message() );
    		env.output()->write("\n"
		"</body>\n"
		"</html>");

        co_return s90::nil {};
    }
};

#ifndef PAGE_INCLUDE
extern "C" LIBRARY_EXPORT void* load_page() { return new renderable; }
extern "C" LIBRARY_EXPORT void unload_page(renderable *entity) { delete entity; }
#endif
